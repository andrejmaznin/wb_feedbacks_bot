from typing import List

from modules.cabinets.schemas import CabinetSchema


def format_list_of_cabinets(cabinets: List[CabinetSchema]) -> str:
    active_list = [cab for cab in cabinets if cab.invalid is False]
    invalid_list = [cab for cab in cabinets if cab.invalid is True]

    title = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å–µ–ª–ª–µ—Ä–∞ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ'
    active_title = '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã:'
    invalid_title = 'üö´ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã \(–±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\):'
    active_text = ''
    invalid_text = ''

    for counter, cab in enumerate(active_list + invalid_list, start=1):
        if cab.invalid is False:
            active_text += f'*{counter}*\. `{cab.title}`    [üìé –û—Ç–≤–µ—Ç—ã]({cab.table_url})\n'
        else:
            invalid_text += f'*{counter}*\. `{cab.title}`   [üìé –û—Ç–≤–µ—Ç—ã]({cab.table_url})\n'

    if invalid_list:
        formatted_text = f'{title}\n\n{active_title}\n{active_text}\n{invalid_title}\n{invalid_text}'
    else:
        formatted_text = f'{title}\n\n{active_title}\n{active_text}'
    return formatted_text
